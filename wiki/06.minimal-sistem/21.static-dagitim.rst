Static Minimal Dağıtım Oluşturma
++++++++++++++++++++++++++++++++

Busybox ile bir dağıtım oluşturma işlemini yaptığınızı varsayıyorum.
Bu aşamaya kadar başarılı bir şekilde yaptığınızı varsayarak aklınıza bir çok soru gelecektir.
Bu sorulardan birini ben sorayım sizin yerinize. Busybox yoksa elimizde ya da olmasını istemiyorum nasıl olacak dağıtım diyebilirsiniz.
Ufak değişiklikler olsada **busybox** distrosu hazırlarken yaptığımız aşamaların aynısı olacak.
Bu durumda initrd.img dosyasını yeniden yazmamız gerekmektedir.
Yukarıda initrd.img dosyası için aşağıdaki gibi bir init dosyası oluşturduğumuzu hatırlıyorsunuzdur.

.. code-block:: shell

	#!busybox ash
	PATH=/bin
	/busybox mkdir /bin
	/busybox --install -s /bin
	/busybox ash

Daha sonra ise;
**chomod +x init** komutu ile çalıştırılır yapılır.
Ardından **find ./ |cpio -H newc -o >initrd.img** komutu ile **initrd.img** dosyasını oluşturmuştuk.

Şimdi bu işlemleri biraz değiştirip **busybox** dosyası yerine bağımsız bir init ikili dosyasını yazalım ve derleyelim.
Bunun için;

.. code-block:: shell

	distro/init.c

yapıyı oluşturmalıyız . Bunun  için aşağıdaki komutlar çalıştırılır.

.. code-block:: shell

	mkdir distro
	cd distro
	nano init.c
		
Komutlarından sonra **init.c** dosya içeriği aşağıdaki gibi olmalıdır.

.. code-block:: shell

	#include<stdio.h>

	int main() {
	char data[30];
	    while(1){
	        printf(">>");
	        scanf("%s",data);
	        printf("girilen bilgi: %s\n",data);
	    }
	    return 0;
	}

**init.c** dosyası sonsuz bir döngüde bilgi alıyor ve ekrana girilen bilgi diye tekrar yazdırılıyor.
Şimdi ise **static** olarak derleyelim. **Static** derleme hiç bir başka
dosyaya ihtiyaç duymadan çalışacağı anlamına gelmektedir.

**Not:** init asla kapanmamalıdır. Kapandığı taktirde **kernel panic** hatası alırsınız.

**gcc init.c -o init -static** bu komutla static olarak derledik.

.. code-block:: shell

	ldd ./init
	özdevimli bir çalıştırılabilir değil

"özdevimli bir çalıştırılabilir değil" dinamik değil diyor yani static kısacası bir bağımlılığı yok demektir.
Eğer bağımlılığı olsaydı bağımlı olduğu dosyalarıda konumlarına göre kopyalamamız gerekmekteydi.

Şimdi ise initrd.img dosyasını oluşturacak komutumuzu çalıştıralım.
**echo "init"|cpio -H newc -o >initrd.img** bu komutla **initrd.img** dosyasını oluşturduk.

Bize sadece distro klasöründeki **initrd.img** dosyası daha sonra kullanmak üzere gerekli olacak.

Bir distro isosu için aşağıdaki gibi bir klasör yapısı elde etmemiz gerekmektedir.

.. code-block:: shell

	distro/iso/boot/vmlinuz
	distro/iso/boot/initrd.img
	distro/iso/boot/grub/grub.cfg yapısını oluşturmalıyız.

şimdi sırasıyla satır satır yapıyı oluşturalım

.. code-block:: shell

	mkdir iso
	mkdir iso/boot
	# sistemde kullandığım kerneli kopyaladım istenirde kernel derlenebilir.
	cp /boot/vmlinuz* iso/boot/vmlinuz
	# daha önce oluşturduğumuz **initrd.img** dosyamızı taşıyoruz.  
	mv ./initrd.img iso/boot/initrd.img
	mkdir iso/boot/grub*
	# grub.cfg dosyası oluşturulur ve içeriği aşağıdaki gibi düzenlenir ve kaydedilir.
	touch iso/boot/grub/grub.cfg  

.. code-block:: shell

	linux /boot/vmlinuz
	initrd /boot/initrd.img
	boot

Yukarıdaki üç satır **iso/boot/grub/grub.cfg** dosyasının içeri olacak şekilde ayarlanır.

**grub-mkrescue iso/ -o distro.iso** komutuyla iso doyamız oluşturulur.

Artık sistemi açabilen ve tty açıp bize suna bir yapı oluşturduk. 
Çalıştırmak için qemu kullanılabililir.

**qemu-system-x86_64 -cdrom distro.iso -m 1G** komutuyla çalıştırıp test edebiliriz.. 
Eğer hatasız yapılmışsa sistem açılacak ve **init** ikili dosyamız çalışacaktır.
Bizden bilgi girmemizi ve daha sonra girdiğimiz bilgiyi ekrana yazan bir bağımsız dağıtım yapmış olduk.

.. raw:: pdf

   PageBreak

