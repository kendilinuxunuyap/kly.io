Derleme Türleri
+++++++++++++++

Kaynak kodları elimizde olan bir uygulama dosyası **dynamic** ve **static** olarak iki farklı şekilde derlenebilir. Derlenecek uygulama kodu **main.c** içeriği aşağıdadır.

.. code-block:: C

	//main.c dosyamız
	#include <stdio.h>
	int main(){
	    printf("Merhaba\n");
	}


Dynamic Derleme
---------------

Derlenen uygulama  sistemde bulunan kütüphaneleri kullanacak şeklide derlenmesidir. Aşağıdaki gibi derlenir.

.. code-block:: shell

	gcc -o main main.c

Derlediğimiz uygulamanın kullandığı kütüphaneleri **ldd** komutu kullanarak öğrenilir.

.. code-block:: shell

	unset LD_PRELOAD
	ldd ./main 
		linux-vdso.so.1 (0x00007fff915fe000)
		libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f622270f000)
		/lib64/ld-linux-x86-64.so.2 (0x00007f6222917000)

Burada **libc.so.6** ve **ld-linux-x86_64.so.2** dosyaları **glibc** tarafından sağlanır. 
Derlenmiş dosyanın çalışması için tüm bağımlılıklarının sistemde bulunması gereklidir.Sadece gerekli olan kütüphaneleri görmek için   **readelf -d** komutu kullanılabilir. Aşağıda gerekli olan kütüphaneler listeleniyor.
 
.. code-block:: shell

	readelf -d ./main | grep -i needed 
		0x0000000000000001 (NEEDED)             Paylaşımlı kitaplık: [libc.so.6]

**interpreter Kavramı**
-----------------------

libc.so.6 ve ld-linux-x86-64.so.2 glibc tarafından sağlanır derlenmiş dosyaların çalışması için gereklidir. Bu dosyalardan libc.so.6 temel C kütüphanesidir. ld-linux-x86-64.so.2 ise interpreter olup dosyanın ne şekilde çalıştırılacağını belirler. Bir dosyanın hangi interpreter ile çalıştığını bulmak için file komutuyla görebiliriz. Aşağıdaki file çıktısında **interpreter** **/lib64/ld-linux-x86-64.so.2** olduğunu görüyoruz. linux-vdso.so.1 ise kernel tarafından sağlanır ve herhangi bir dosya şeklinde bulunmaz.

.. code-block:: shell

	file main 
	main: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, 
	interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=97ab2d8962f9a56a6a29ae7169cf9692d06956e7, 
	for GNU/Linux 3.2.0, not stripped

**LD_LIBRARY_PATH**
-------------------

Derlenmiş bir dosyanın bağımlılığı genellikle sistemde kurulu bulunmalıdır. Bazen farklı konumda özel bir kütüphane gerekebilir. Bu durumlarda LD_LIBRARY_PATH çevresel değişkenini kullanarak konum belirtilir.

.. code-block:: shell

	ldd main
	linux-vdso.so.1 (0x00007fff915fe000)
	libmain.so => not found
	libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f622270f000)
	/lib64/ld-linux-x86-64.so.2 (0x00007f6222917000)

**libmain.so** dosyası sistemdeki yeri bilinmediğinden hata aldık. Şimdi **LD_LIBRARY_PATH** ile konumunu belirtelim, tekrar deneyelim.

.. code-block:: shell

	export LD_LIBRARY_PATH=/home/abc/main/libs/
	ldd main
	linux-vdso.so.1 (0x00007fff915fe000)
	libmain.so => /home/abc/main/libs/libmain.so (0x00007f92ed6cb000)
	libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f622270f000)
	/lib64/ld-linux-x86-64.so.2 (0x00007f6222917000)

ldd çıktımızda tüm kütüphanelerin bulunduğu görülmektedir.


**ldconfig**
------------

Sistemdeki kütüpkhanelerin konumlarını **/etc/ld.so.conf** dosyasına bakarak belirler. Aşağıda **/etc/ld.so.conf** içeriğinde sistemde kurulu olan kütüphanelerin konumları yazılmıştır. 

.. code-block:: shell

	include /etc/ld.so.conf.d/*.conf
	/usr/local/lib64
	/usr/local/lib
	/usr/lib64
	/usr/lib
	/lib64
	/lib


Kütüphanelerde değişiklik yapılmışsa ve hemen bu değişikliği sistemin görmesini istersek **ldconfig** komutu kullanılmalıdır.

Static Derleme
--------------

Derlenen uygulama sistemde  bulunan ve çalışması için gerekli olan kütüphaneleri uygulama içine dahil eden bir derleme yöntemidir. Uygulamamızı static derlemek için  **-static** parametresi ekleyerek derlenir.

.. code-block:: shell

	gcc -o main main.c -static

**ldd** komutunu kullanarak bağımlı olduğu kütüphaneler varmı diye kontrol edelim. Eğer **static** derlenmişe **not a dynamic executable** mesajı alınır. 

.. code-block:: shell

	ldd main
	    not a dynamic executable

Static dosyalarda dosyanın çalışması için kütüphanelerin hepsi kendi içerisine gömümülü(dahil) bir şekilde gelir.
Avantajı hiçbir kütüphaneye ihtiyaç duymaz. Devevantajı ise boyutları yüksek olur. İstisnalar olsada genel olarak static tercih edilmemektedir.


.. raw:: pdf

   PageBreak


